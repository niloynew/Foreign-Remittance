variables:
  PIPELINE_VERSION: 'SERVICE-0.0.2-GRADLE'
  DEBUG_OPTS: '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
  RELEASE_NUMBER: '5.1.0'
  # DOCKER_FILE: ''
  # DOCKER_STACK_FILE: ''

  # ARTIFACT_NAME: ''
  # ARTIFACT_BUILD_PATH: ''

  
  # SERVICE_NAME: ''
  # SERVICE_IMAGE: ''
  # SERVICE_URL: ''
  # HEALTH_CHECK_URL: ''
  # JAVA_OPTS: ''
  # CONFIG_PROFILES: ''
  # CONFIG_SERVER_URI: ''
  
  # ENABLE_DEV_DEBUG: ''
  # DEBUG_PORT: ''

stages:
  - build
  - build_image
  - push_image
  - deploy

cache:
  paths:
    - ${ARTIFACT_BUILD_PATH}/


build:
  stage: build
  only: ['R5.1.0']
  tags:
    - 'openjdk:8u181'
  before_script:
    - chmod +x gradlew
  script:
    - ./gradlew clean build -x test


build_image:
  stage: build_image
  when: on_success
  before_script:
    - 'echo "Using pipeline: ${PIPELINE_VERSION}"'
    - wget -O Dockerfile $DOCKER_FILE
    - echo "Dockerfile:-"
    - echo "$(cat Dockerfile)"
  script:
    - export ARTIFACT="${ARTIFACT_BUILD_PATH}/libs/$(cat gradle.properties | grep PROJECT_ARTIFACT | cut -d'=' -f2-)-$(cat gradle.properties | grep PROJECT_VERSION | cut -d'=' -f2-).jar"
    - export VERSION="$(cat gradle.properties | grep PROJECT_VERSION | cut -d'=' -f2-)"
    - docker build --rm --force-rm --label "com.mislbd.global.build.id=$CI_PIPELINE_ID" --label "com.mislbd.local.build.id=$CI_PIPELINE_ID" --label "com.mislbd.version=${VERSION}" --build-arg ARTIFACT="$ARTIFACT" -t ${DOCKER_IMAGE}:latest .
    - docker tag ${DOCKER_IMAGE}:latest ${DOCKER_IMAGE}:${RELEASE_NUMBER}_${CI_PIPELINE_ID}
  only: ['R5.1.0']
  tags: ['shell']

push_image:
  stage: push_image
  when: on_success
  only: ['R5.1.0']
  tags:
    - shell
  before_script:
    - 'echo "Using pipeline: ${PIPELINE_VERSION}"'
  script:
    - export ARTIFACT="${ARTIFACT_BUILD_PATH}/libs/$(cat gradle.properties | grep PROJECT_ARTIFACT | cut -d'=' -f2-)-$(cat gradle.properties | grep PROJECT_VERSION | cut -d'=' -f2-).jar"
    - docker push ${DOCKER_IMAGE}:latest
    - docker push ${DOCKER_IMAGE}:${RELEASE_NUMBER}_${CI_PIPELINE_ID}
    # clean up image
    - docker rmi ${DOCKER_IMAGE}:latest
    - docker rmi ${DOCKER_IMAGE}:${RELEASE_NUMBER}_${CI_PIPELINE_ID}


